[/
    Copyright 2014-2015, Chris Glover

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
]

[chapter Overview
    [quickbook 1.6]
    [id entity.overview]
    [source-mode teletype]
]

'entity' is the realization of a bet made with a co-worker that it would be
possible to adequately abstract away the concept of entity/component
relationships in a way that doesn't impose a large runtime performance
penalty.  The result is this library, where, if used correclty can handle all
sorts of entity/component arrangements with little or no peformance overhead
depending on compiler optiomzations.

While here are several entity/component systems out there for C++, they all
suffer from the same issue; the component list is carried with the entity
which creates a performance issue in code trying to get components.

'entity' takes a different approach. Here, an entity is basically an int and a
component is a corresponding entry in an array somewhere. This simple
approach leads to a near zero performance penalty for the abstraction with
the only caveat being that the code must have access to the pools as well as
the entity in order to do any work. An interesting side effect of this design
is that it puts to programmer back in control of access rights because one
can hide pools that should not be accessed from other systems.  For other
entity systems, everything on the entity is essentially global to the entity.

Woth regards to the pools themselves, entity makes no attempt to manage them.
Instead, this library focuses on managing the comunication between the various
pools and entitys for lifetime management such that the programmer is freed
from having to worry about this.  The idea is similar to that of constructors
and destructors.

[tip For more details of what and Entity/Component system is, you can read
about it on Wikipedia under __ecs__ 
]

